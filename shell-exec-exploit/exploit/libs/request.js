//@ts-check
let { uri, headers } = require('../config');

module.exports = { create };

/**
 * @param {(input: string) => string} inputFormatter
 * @param {(result: string, statusCode: number) => string} resultFormatter
 */
function create(inputFormatter, resultFormatter) {
	let postQ = [];
	let context = { exec };
	return context;

	/**
	 * @param {('debug_break'|string|(string[]))[]} commands
	 * @param {(result: string, statusCode: number) => any} callback */
	function exec(commands = [], callback) {
		let cmds = [];
		for (let cmd of commands) {
			if (!cmd) continue;
			if (cmd == 'debug_break') break;
			if (Array.isArray(cmd))
				cmds = cmds.concat(cmd);
			else
				cmds.push(cmd);
		}

		let cmdStr = cmds.join(';');
		if (inputFormatter) cmdStr = inputFormatter(cmdStr);

		request(cmdStr, callback);
		return context;
	}

	/** @param {(result: string, statusCode: number) => any} callback */
	function request(command = null, callback) {
		if (!command && !postQ.length) return;

		if (command && postQ.length) return postQ.push([command, callback]);
		if (command && !postQ.length) postQ.push([command, callback]);

		if (!command) {
			command = postQ[0][0];
			callback = postQ[0][1];
		}

		require('request')({
			method: 'post', url: uri,
			form: { name: command, submit: 'submit' }
		}, (err, res, body) => {
			if (err) {
				console.error(err.message);
				return process.nextTick(request);
			}
			postQ.shift();
			process.nextTick(request);

			let bd = String(body) || '';
			if(resultFormatter) bd = resultFormatter(bd, res.statusCode);
			
			callback && callback(bd, res.statusCode);
		})
	}
}